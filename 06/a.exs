defmodule Pass do
  def first(input) do
    1..40 |> Enum.reduce([input], fn _, xs ->
      (xs |> Enum.map(fn n -> if n == 0 do 6 else n - 1 end end)) ++
      (xs |> Enum.filter(&(&1 == 0)) |> Enum.map(fn _ -> 8 end))
    end)
  end
end

map = 0..8 |> Enum.map(&Pass.first/1)
sums = map |> Enum.map(&length/1)

[
  3,5,1,2,5,4,1,5,1,2,5,5,1,3,1,5,1,3,2,1,5,1,1,1,2,3,1,3,1,2,1,1,5,1,5,4,5,5,
  3,3,1,5,1,1,5,5,1,3,5,5,3,2,2,4,1,5,3,4,2,5,4,1,2,2,5,1,1,2,4,4,1,3,1,3,1,1,
  2,2,1,1,5,1,1,4,4,5,5,1,2,1,4,1,1,4,4,3,4,2,2,3,3,2,1,3,3,2,1,1,1,2,1,4,2,2,
  1,5,5,3,4,5,5,2,5,2,2,5,3,3,1,2,4,2,1,5,1,1,2,3,5,5,1,1,5,5,1,4,5,3,5,2,3,2,
  4,3,1,4,2,5,1,3,2,1,1,3,4,2,1,1,1,1,2,1,4,3,1,3,1,2,4,1,2,4,3,2,3,5,5,3,3,1,
  2,3,4,5,2,4,5,1,1,1,4,5,3,5,3,5,1,1,5,1,5,3,1,2,3,4,1,1,4,1,2,4,1,5,4,1,5,4,
  2,1,5,2,1,3,5,5,4,5,5,1,1,4,1,2,3,5,3,3,1,1,1,4,3,1,1,4,1,5,3,5,1,4,2,5,1,1,
  4,4,4,2,5,1,2,5,2,1,3,1,5,1,2,1,1,5,2,4,2,1,3,5,5,4,1,1,1,5,5,2,1,1
]
  |> Enum.flat_map(fn i -> Enum.fetch!(map, i) end)
  |> Enum.map(fn i -> Enum.fetch!(sums, i) end)
  |> Enum.reduce(&(&1 + &2))
  |> IO.inspect
